spring:
  application:
    name: GreengramVer2
  config:
    import: optional:file:.env
    #optional : .env 파일이 없어도 컴파일 에러가 발생 X
    #file : 파일을 import하겠다
    #.env : 파일명
    #.env 파일의 변수사용 : ${변수명}
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: ${DEFAULT.DB_URL}
    username: ${DEFAULT.DB_USERNAME}
    password: ${DEFAULT.DB_PASSWORD}
  jackson:
    deserialization:
      fail-on-ignored-properties: false
    default-property-inclusion: non_null
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
            client-secret: ${SOCIAL.KAKAO.SECRET}
            client-authentication-method: client_secret_post # 쿼리스트링으로 client-id, client-secret 날아간다.
            authorization-grant-type: authorization_code # 권한부여 유형 ( 인가코드 > access-token 을 받는 방식 )
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # redirect_uri: http://localhost:8080/login/oauth2/code/kakao 위와 같음.
            scope:
              - profile_nickname
              - profile_image
            client-name: Kakao
          naver:
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post # 쿼리스트링으로 client-id, client-secret 날아간다.
            authorization-grant-type: authorization_code # 권한부여 유형 ( 인가코드 > access-token 을 받는 방식 )
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # redirect_uri: http://localhost:8080/login/oauth2/code/kakao 위와 같음.
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header #사용자 정보를 가져올 때 토큰을 보내는 방법 , 속성값(header, form, query), header 가 기본값
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #소셜 로그인 버튼을 눌렀을 때 이동할 URL
            token-uri: https://nid.naver.com/oauth2.0/token #사용자 서비스 서버가 Redirect URI 로 전달받은 (인가 코드)로 (액세스 토큰)을 요청하는 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me #서비스 서버가 발급받은 액세스 토큰으로 사용자 정보를 가져오는 URI 입니다.
            user-name-attribute: response
  servlet:
    multipart:
      max-file-size: 5MB

mybatis:
  mapper-locations: mappers/**/*.xml

springdoc:
  api-docs:
    version: openapi_3_1
  swagger-ui:
    path: /swagger
    operations-sorter: method
    default-model-expand-depth: 10
    display-request-duration: true
  cache:
    disabled: true

server:
  port: 8080

file:
  dir: ${DEFAULT.FILE_DIRECTORY}

# Custom 속성 지정
app:
  jwt:
    # JWT 만들때 사용하는 열쇠 ( 암호화 ) > 나중에 복호화 할때도 사용
    secret: ${JWT_SECRET}
    #front-back 간 JWT 받는 헤더키이름 #프론트랑 이름 맞춰야됨.
    header-schema-name: authorization
    #토큰의 종류: Bearer 는 JWT or OAuth( 소셜로그인 때 사용 ) 를 의미
    token-type: Bearer
    #AT - 만료시간(ms) - 30분
    access-token-expiry: 1_800_000
    #RT - 만료시간(ms) - 15일
    refresh-token-expiry: 1_296_000_000
    refresh-token-cookie-name: refresh-token
  oauth2:
    base-uri: /oauth2/authorization
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-second: 180
    authorized-redirect-uris: # OAuth2 처리시 허용한 FE 리다이렉트 주소값
      - http://localhost:3000/oauth/redirect
      - http://localhost:8080/oauth/redirect
      - http://192.168.0.144:5121/oauth/redirect #내부 도커서버 IP
      - http://112.222.157.156:5121/oauth/redirect #외부 IP

management:
  endpoint: #엔드포인트 (URL)
    health:
      show-details: always
  endpoints: #전체 엔드포인트 세팅
    web:
      exposure:
        include: "*"
  info:
    java:
      enabled: true
    os:
      enabled: true
    env:
      enabled: true
  server:
    port: 8080 #8080으로 접근했을때만 접근가능

---
spring:
  config:
    activate:
      on-profile: tdd
  datasource:
      url: ${TDD.DB_URL}
  sql:
    init:
      mode: always
---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${PROD.DB_URL}
    username: ${PROD.DB_USERNAME}
    password: ${PROD.DB_PASSWORD}
file:
  dir: ${PROD.FILE_DIRECTORY}